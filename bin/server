#!/usr/bin/env node

const distbin = require('../');
const http = require('http');
const querystring = require('querystring')
const url = require('url')

const distbinHtml= require('../src/distbin-html')
const { readableToString, sendRequest } = require('../src/util');

// Run tests if this file is executed
if (require.main === module) {
  runServer()
    .then(() => process.exit())
    .catch((err) => {
    	console.error("Uncaught Error", err)
    	process.exit(1)
    })
}

async function runServer() {
	Object.keys({
	  'SIGINT': 2,
	  'SIGTERM': 15
	}).forEach(function (signal) {
	  process.on(signal, function () {
	  	process.exit()
	  });
	});

	const apiHandler = distbin()

	// api
	const apiServer = http.createServer(apiHandler)
	const apiServerUrl = await new Promise((resolve) => {
		apiServer.listen(0, function (err) {
			resolve(`http://localhost:${apiServer.address().port}`)
		})
	})

	// html
	const htmlServer = http.createServer(distbinHtml.createHandler({ apiUrl: apiServerUrl }))
	const htmlServerUrl = await new Promise((resolve) => {
		htmlServer.listen(0, function (err) {
			resolve(`http://localhost:${htmlServer.address().port}`)
		})
	})	

	// mainServer delegates to htmlHandler or distbin api handler based on Accept header
	// of request
	// #TODO this is awkard. Maybe the 'home page module' at / should now how to content negotiate, not this. But not sure best
	//   way to do that without making the api part depend on the html part
	const mainServer = http.createServer((req, res) => {
		// htmlHandler only supports '/' right now (#TODO)
		const accept = req.headers.accept ? req.headers.accept.split(',') : [];
		const preference = accept.find((mime) => ['text/html', 'application/json'])
		if (preference !== 'text/html') {
			// just hit api
			return apiHandler(req, res);
		}
		// preference is html
		// proxy to htmlServer
		const htmlReq = http.request(Object.assign(url.parse(htmlServerUrl),{
			method: req.method,
			path: req.url,
			headers: req.headers,
		}))
		req.pipe(htmlReq).on('finish', function () {
			sendRequest(htmlReq)
			.then((htmlRes) => {
				if (htmlRes.statusCode !== 404) {
					res.writeHead(htmlRes.statusCode, htmlRes.headers)
					htmlRes.pipe(res);
					return;
				}
				// htmlServer can't help, delegate to apihandler
				return apiHandler(req, res)
			})
		})
	})
	// listen
	let mainServerUrl = await new Promise((resolve) => {
		mainServer.listen(process.env.PORT || 0, (err) => {
			resolve(`http://localhost:${mainServer.address().port}`)
		})
	})

	console.log(mainServerUrl)
	// now just like listen
	await new Promise(function () {

	})
}
